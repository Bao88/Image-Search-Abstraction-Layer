/******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongodb = require("mongodb");

// var fetch = require('node-fetch');
// var google = require('google');

// var GoogleSearch = require('google-search');
// var googleSearch = new GoogleSearch({
//   key: process.env.GKEY,
//   cx: process.env.CX
// });
const GoogleSearch = require('wko-google-search');
var googleSearch = new GoogleSearch({
  key: process.env.GKEY,
  cx: process.env.CX
});

// --------------------------------- Freecodecamp ---------------------------------
if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
// --------------------------------- mycode ---------------------------------
var uri = process.env.MONGODB, retStr = "", myDB= null, collection=null, latest=null, size=0;
mongodb.MongoClient.connect(uri, function(err, database){
  if(err) throw err;
  retStr+="Connecting to "+process.env.DB;
  
//   Connect to the database
  myDB = database.db(process.env.DB);
  collection = myDB.collection(process.env.DB); //Create a reference to the collection
  collection.count().then(function(items){
    console.log(items);
    size = items;
  });
  
  myDB = database.db(process.env.DB);
  latest = myDB.collection(process.env.DB2);
  latest.count().then(function(items){
    console.log("latest " + items);
    size=items;
  });
});
// search images using google API
app.route('/api/imagesearch/*').get(function(req, res) {

  var url = req.url.slice(17).split("?")[0].replace("%20", " ");
  var off = req.url.slice(17).split("?")[1].replace("offset=", "");
  var objArray = [], date = new Date();
  // console.log(url + " " + off);
  
//   Store the search history
  latest.save({
    _id: size++,
    term: url,
    when: new Date().toJSON()
  });
  
  googleSearch.fetch(url, {
    offset: off,
    limit: 10
  }, function(err, hits){
    for(var i = 0; i < hits.length; i++){
  
       objArray.push(
       {
         url: hits[i].pagemap.cse_image ? hits[i].pagemap.cse_image[0].src : hits[i].pagemap.cse_image,
         snippet: hits[i].snippet,
         thumbnail: hits[i].pagemap.cse_thumbnail ? hits[i].pagemap.cse_thumbnail[0].src : hits[i].pagemap.cse_thumbnail,
         context: hits[i].link
       }
     ); 
    }
    
    res.status(200);
    res.type("json").send(objArray);   
  });
})

// Retrieve url from the mongoDB with the shortened url
app.route('/api/latest/imagesearch/').get(function(req, res) {
  // var url = "https://bao88-url-shortener-microservice.glitch.me"+req.url;
  console.log(req.url);
  latest.find( { _id: {$gt: size-11} }, { _id: 0, term: 1, when: 1}).toArray().then(function(items){
    items.map(function(item){delete item._id;});
    console.log(items);
    res.status(200);
    res.type("json").send(items); 
  });  
})
// --------------------------------- end mycode ---------------------------------

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
})

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

// --------------------------------- Freecodecamp ---------------------------------